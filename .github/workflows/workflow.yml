# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      branch:
        default: "test"
      name:
        default: "nauman"
      flutter_version:
        description: 'Flutter Framework version'
        required: true
        default: '2.5.3' 
      
      

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, "${{github.event.inputs.name}}"!
        
      - name: Update Splash Screen & App Icon
        run: |
          ls
          chmod +x ./script.sh
          $"./script.sh good" 
        shell: bash
        
      # Flutter env setup
      - uses: actions/setup-java@v1      
        with:
          java-version: '12.x'
      - name: Set Flutter version
        uses: subosito/flutter-action@v2.2.0
        with:
          flutter-version: '${{ github.event.inputs.flutter_version }}'
      - run: flutter --version
        

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          mkdir testdir
          ls
     
     # Create new branck
      - name: Create New Branch "${{github.event.inputs.branch}}"
        run: |
          git checkout -b "${{github.event.inputs.branch}}"
          git push --set-upstream origin "${{github.event.inputs.branch}}"

          

